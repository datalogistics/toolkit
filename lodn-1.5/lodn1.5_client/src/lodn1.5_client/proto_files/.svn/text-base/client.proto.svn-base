package lodn;
import 'datatypes.proto';


message SessionOpenMsg
{
    enum EncryptionMethod
    {
        PLAIN   = 0;
        SSLv23  = 1;
        SSLv3   = 2;
        TLSv1   = 3;
    }

    // Session id used for  session resumption
    optional uint32 sessionID                   = 1;    
    
    // Types of encryption to use in order of preference
    repeated EncryptionMethod encryptionMethod  = 2;    
    
    // ID of the message in the channel (May not be zero in the case of 
    // session resumption
    optional uint32 msgID                       = 3;
}


message SessionClosedMsg
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;
}


message ResponseMsg
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;
    
    // Error number
    optional int32 errnum                       = 2;
    
    // Error message
    optional string errstr                      = 3;
}



message AckResponseMsg
{
    // ID of messages 
    repeated uint32 msgIDs                      = 1;
}



message mkdirMsg
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;

    // Path of the path
    optional string path                        = 2;
}


message RmdirRequest
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;
    
    // Path of the path
    optional string path                        = 2;
}


message CreateFileRequest
{
     // ID of the message in the channel
    optional uint32 msgID                       = 1;
    
    // Path of the path
    optional string path                        = 2;
}


message GetDirRequest
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;
    
    // Path of the path
    optional string path                        = 2;
}

message Dirent
{
    optional string name                    = 1;
    optional uint64 inode                   = 2;
    optional uint32 type                    = 3;
}
    
    
message GetDirReply
{    
    // ID of the message in the channel
    optional uint32 msgID                       = 1;

    // List of dirents
    repeated Dirent dirents                     = 2;
}


message AddMappingsRequest
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;

    // Path to the file 
    optional string path                        = 2;
    
    // Mappings
    repeated Mapping mappings                   = 3;
}

message GetMappingsRequest
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;

    // Path to the file 
    optional string path                        = 2;
}

message GetMappingsReply
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;

    // Mappings
    repeated Mapping mappings                   = 2;
}


message GetStatRequest
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;

    // Path to the file 
    optional string path                        = 2;
}



message GetStatReply
{
    // ID of the message
    optional uint32 msgID                       = 1;
    
    // Stat
    optional Stat stat                          = 2;
}


message UnlinkRequest
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;

    // Path to the file 
    optional string path                        = 2;
}



message SetXAttrRequest
{
    // ID of the message
    optional uint32 msgID                       = 1;
    
    // Path to the file 
    optional string path                        = 2;
    
    // XAttr 
    optional string name                        = 3;
    optional bytes  value                       = 4;
    optional uint32 size                        = 5;
    optional uint32 position                    = 6;
}

message GetXAttrRequest
{
    // ID of the message
    optional uint32 msgID                       = 1;

    // Path to the file 
    optional string path                        = 2;
    
    // Name of the attribute
    optional string name                        = 3;
    
    // Size to retrieve
    optional uint32 size                        = 4;
    
    // Position
    optional uint32 position                    = 5;
}


message GetXattrReply
{
    // ID of the message
    optional uint32 msgID                       = 1;

    // Byte range of the result
    optional bytes    value                     = 2;
}





// Server info request
message LoDNInfoRequestMsg
{
    // ID of the message in the channel
    optional uint32 msgID                       = 1;
}

// Info response message
message LoDNInfoMsg
{
    message Version
    {
        required uint32 major       = 1;
        required uint32 minor       = 2;
        required uint32 subminor    = 3;
    }
    
    required Version version = 1;
}

