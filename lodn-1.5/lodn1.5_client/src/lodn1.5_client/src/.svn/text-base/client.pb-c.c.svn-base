/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#include "client.pb-c.h"
void   lodn__session_open_msg__init
                     (Lodn__SessionOpenMsg         *message)
{
  static Lodn__SessionOpenMsg init_value = LODN__SESSION_OPEN_MSG__INIT;
  *message = init_value;
}
size_t lodn__session_open_msg__get_packed_size
                     (const Lodn__SessionOpenMsg *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_open_msg__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__session_open_msg__pack
                     (const Lodn__SessionOpenMsg *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_open_msg__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__session_open_msg__pack_to_buffer
                     (const Lodn__SessionOpenMsg *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_open_msg__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__SessionOpenMsg *
       lodn__session_open_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__SessionOpenMsg *)
     protobuf_c_message_unpack (&lodn__session_open_msg__descriptor,
                                allocator, len, data);
}
void   lodn__session_open_msg__free_unpacked
                     (Lodn__SessionOpenMsg *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_open_msg__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__session_closed_msg__init
                     (Lodn__SessionClosedMsg         *message)
{
  static Lodn__SessionClosedMsg init_value = LODN__SESSION_CLOSED_MSG__INIT;
  *message = init_value;
}
size_t lodn__session_closed_msg__get_packed_size
                     (const Lodn__SessionClosedMsg *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_closed_msg__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__session_closed_msg__pack
                     (const Lodn__SessionClosedMsg *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_closed_msg__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__session_closed_msg__pack_to_buffer
                     (const Lodn__SessionClosedMsg *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_closed_msg__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__SessionClosedMsg *
       lodn__session_closed_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__SessionClosedMsg *)
     protobuf_c_message_unpack (&lodn__session_closed_msg__descriptor,
                                allocator, len, data);
}
void   lodn__session_closed_msg__free_unpacked
                     (Lodn__SessionClosedMsg *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__session_closed_msg__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__response_msg__init
                     (Lodn__ResponseMsg         *message)
{
  static Lodn__ResponseMsg init_value = LODN__RESPONSE_MSG__INIT;
  *message = init_value;
}
size_t lodn__response_msg__get_packed_size
                     (const Lodn__ResponseMsg *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__response_msg__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__response_msg__pack
                     (const Lodn__ResponseMsg *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__response_msg__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__response_msg__pack_to_buffer
                     (const Lodn__ResponseMsg *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__response_msg__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__ResponseMsg *
       lodn__response_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__ResponseMsg *)
     protobuf_c_message_unpack (&lodn__response_msg__descriptor,
                                allocator, len, data);
}
void   lodn__response_msg__free_unpacked
                     (Lodn__ResponseMsg *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__response_msg__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__mkdir_msg__init
                     (Lodn__MkdirMsg         *message)
{
  static Lodn__MkdirMsg init_value = LODN__MKDIR_MSG__INIT;
  *message = init_value;
}
size_t lodn__mkdir_msg__get_packed_size
                     (const Lodn__MkdirMsg *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mkdir_msg__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__mkdir_msg__pack
                     (const Lodn__MkdirMsg *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mkdir_msg__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__mkdir_msg__pack_to_buffer
                     (const Lodn__MkdirMsg *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mkdir_msg__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__MkdirMsg *
       lodn__mkdir_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__MkdirMsg *)
     protobuf_c_message_unpack (&lodn__mkdir_msg__descriptor,
                                allocator, len, data);
}
void   lodn__mkdir_msg__free_unpacked
                     (Lodn__MkdirMsg *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mkdir_msg__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__rmdir_request__init
                     (Lodn__RmdirRequest         *message)
{
  static Lodn__RmdirRequest init_value = LODN__RMDIR_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__rmdir_request__get_packed_size
                     (const Lodn__RmdirRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__rmdir_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__rmdir_request__pack
                     (const Lodn__RmdirRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__rmdir_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__rmdir_request__pack_to_buffer
                     (const Lodn__RmdirRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__rmdir_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__RmdirRequest *
       lodn__rmdir_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__RmdirRequest *)
     protobuf_c_message_unpack (&lodn__rmdir_request__descriptor,
                                allocator, len, data);
}
void   lodn__rmdir_request__free_unpacked
                     (Lodn__RmdirRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__rmdir_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__create_file_request__init
                     (Lodn__CreateFileRequest         *message)
{
  static Lodn__CreateFileRequest init_value = LODN__CREATE_FILE_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__create_file_request__get_packed_size
                     (const Lodn__CreateFileRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__create_file_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__create_file_request__pack
                     (const Lodn__CreateFileRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__create_file_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__create_file_request__pack_to_buffer
                     (const Lodn__CreateFileRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__create_file_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__CreateFileRequest *
       lodn__create_file_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__CreateFileRequest *)
     protobuf_c_message_unpack (&lodn__create_file_request__descriptor,
                                allocator, len, data);
}
void   lodn__create_file_request__free_unpacked
                     (Lodn__CreateFileRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__create_file_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_dir_request__init
                     (Lodn__GetDirRequest         *message)
{
  static Lodn__GetDirRequest init_value = LODN__GET_DIR_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__get_dir_request__get_packed_size
                     (const Lodn__GetDirRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_dir_request__pack
                     (const Lodn__GetDirRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_dir_request__pack_to_buffer
                     (const Lodn__GetDirRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetDirRequest *
       lodn__get_dir_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetDirRequest *)
     protobuf_c_message_unpack (&lodn__get_dir_request__descriptor,
                                allocator, len, data);
}
void   lodn__get_dir_request__free_unpacked
                     (Lodn__GetDirRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__dirent__init
                     (Lodn__Dirent         *message)
{
  static Lodn__Dirent init_value = LODN__DIRENT__INIT;
  *message = init_value;
}
size_t lodn__dirent__get_packed_size
                     (const Lodn__Dirent *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__dirent__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__dirent__pack
                     (const Lodn__Dirent *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__dirent__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__dirent__pack_to_buffer
                     (const Lodn__Dirent *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__dirent__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__Dirent *
       lodn__dirent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__Dirent *)
     protobuf_c_message_unpack (&lodn__dirent__descriptor,
                                allocator, len, data);
}
void   lodn__dirent__free_unpacked
                     (Lodn__Dirent *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__dirent__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_dir_reply__init
                     (Lodn__GetDirReply         *message)
{
  static Lodn__GetDirReply init_value = LODN__GET_DIR_REPLY__INIT;
  *message = init_value;
}
size_t lodn__get_dir_reply__get_packed_size
                     (const Lodn__GetDirReply *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_reply__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_dir_reply__pack
                     (const Lodn__GetDirReply *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_reply__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_dir_reply__pack_to_buffer
                     (const Lodn__GetDirReply *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_reply__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetDirReply *
       lodn__get_dir_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetDirReply *)
     protobuf_c_message_unpack (&lodn__get_dir_reply__descriptor,
                                allocator, len, data);
}
void   lodn__get_dir_reply__free_unpacked
                     (Lodn__GetDirReply *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_dir_reply__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__add_mappings_request__init
                     (Lodn__AddMappingsRequest         *message)
{
  static Lodn__AddMappingsRequest init_value = LODN__ADD_MAPPINGS_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__add_mappings_request__get_packed_size
                     (const Lodn__AddMappingsRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__add_mappings_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__add_mappings_request__pack
                     (const Lodn__AddMappingsRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__add_mappings_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__add_mappings_request__pack_to_buffer
                     (const Lodn__AddMappingsRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__add_mappings_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__AddMappingsRequest *
       lodn__add_mappings_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__AddMappingsRequest *)
     protobuf_c_message_unpack (&lodn__add_mappings_request__descriptor,
                                allocator, len, data);
}
void   lodn__add_mappings_request__free_unpacked
                     (Lodn__AddMappingsRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__add_mappings_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_mappings_request__init
                     (Lodn__GetMappingsRequest         *message)
{
  static Lodn__GetMappingsRequest init_value = LODN__GET_MAPPINGS_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__get_mappings_request__get_packed_size
                     (const Lodn__GetMappingsRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_mappings_request__pack
                     (const Lodn__GetMappingsRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_mappings_request__pack_to_buffer
                     (const Lodn__GetMappingsRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetMappingsRequest *
       lodn__get_mappings_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetMappingsRequest *)
     protobuf_c_message_unpack (&lodn__get_mappings_request__descriptor,
                                allocator, len, data);
}
void   lodn__get_mappings_request__free_unpacked
                     (Lodn__GetMappingsRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_mappings_reply__init
                     (Lodn__GetMappingsReply         *message)
{
  static Lodn__GetMappingsReply init_value = LODN__GET_MAPPINGS_REPLY__INIT;
  *message = init_value;
}
size_t lodn__get_mappings_reply__get_packed_size
                     (const Lodn__GetMappingsReply *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_reply__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_mappings_reply__pack
                     (const Lodn__GetMappingsReply *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_reply__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_mappings_reply__pack_to_buffer
                     (const Lodn__GetMappingsReply *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_reply__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetMappingsReply *
       lodn__get_mappings_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetMappingsReply *)
     protobuf_c_message_unpack (&lodn__get_mappings_reply__descriptor,
                                allocator, len, data);
}
void   lodn__get_mappings_reply__free_unpacked
                     (Lodn__GetMappingsReply *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_mappings_reply__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_stat_request__init
                     (Lodn__GetStatRequest         *message)
{
  static Lodn__GetStatRequest init_value = LODN__GET_STAT_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__get_stat_request__get_packed_size
                     (const Lodn__GetStatRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_stat_request__pack
                     (const Lodn__GetStatRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_stat_request__pack_to_buffer
                     (const Lodn__GetStatRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetStatRequest *
       lodn__get_stat_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetStatRequest *)
     protobuf_c_message_unpack (&lodn__get_stat_request__descriptor,
                                allocator, len, data);
}
void   lodn__get_stat_request__free_unpacked
                     (Lodn__GetStatRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_stat_reply__init
                     (Lodn__GetStatReply         *message)
{
  static Lodn__GetStatReply init_value = LODN__GET_STAT_REPLY__INIT;
  *message = init_value;
}
size_t lodn__get_stat_reply__get_packed_size
                     (const Lodn__GetStatReply *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_reply__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_stat_reply__pack
                     (const Lodn__GetStatReply *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_reply__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_stat_reply__pack_to_buffer
                     (const Lodn__GetStatReply *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_reply__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetStatReply *
       lodn__get_stat_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetStatReply *)
     protobuf_c_message_unpack (&lodn__get_stat_reply__descriptor,
                                allocator, len, data);
}
void   lodn__get_stat_reply__free_unpacked
                     (Lodn__GetStatReply *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_stat_reply__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__unlink_request__init
                     (Lodn__UnlinkRequest         *message)
{
  static Lodn__UnlinkRequest init_value = LODN__UNLINK_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__unlink_request__get_packed_size
                     (const Lodn__UnlinkRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__unlink_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__unlink_request__pack
                     (const Lodn__UnlinkRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__unlink_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__unlink_request__pack_to_buffer
                     (const Lodn__UnlinkRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__unlink_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__UnlinkRequest *
       lodn__unlink_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__UnlinkRequest *)
     protobuf_c_message_unpack (&lodn__unlink_request__descriptor,
                                allocator, len, data);
}
void   lodn__unlink_request__free_unpacked
                     (Lodn__UnlinkRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__unlink_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__set_xattr_request__init
                     (Lodn__SetXAttrRequest         *message)
{
  static Lodn__SetXAttrRequest init_value = LODN__SET_XATTR_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__set_xattr_request__get_packed_size
                     (const Lodn__SetXAttrRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__set_xattr_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__set_xattr_request__pack
                     (const Lodn__SetXAttrRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__set_xattr_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__set_xattr_request__pack_to_buffer
                     (const Lodn__SetXAttrRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__set_xattr_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__SetXAttrRequest *
       lodn__set_xattr_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__SetXAttrRequest *)
     protobuf_c_message_unpack (&lodn__set_xattr_request__descriptor,
                                allocator, len, data);
}
void   lodn__set_xattr_request__free_unpacked
                     (Lodn__SetXAttrRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__set_xattr_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_xattr_request__init
                     (Lodn__GetXAttrRequest         *message)
{
  static Lodn__GetXAttrRequest init_value = LODN__GET_XATTR_REQUEST__INIT;
  *message = init_value;
}
size_t lodn__get_xattr_request__get_packed_size
                     (const Lodn__GetXAttrRequest *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_xattr_request__pack
                     (const Lodn__GetXAttrRequest *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_xattr_request__pack_to_buffer
                     (const Lodn__GetXAttrRequest *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetXAttrRequest *
       lodn__get_xattr_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetXAttrRequest *)
     protobuf_c_message_unpack (&lodn__get_xattr_request__descriptor,
                                allocator, len, data);
}
void   lodn__get_xattr_request__free_unpacked
                     (Lodn__GetXAttrRequest *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__get_xattr_reply__init
                     (Lodn__GetXattrReply         *message)
{
  static Lodn__GetXattrReply init_value = LODN__GET_XATTR_REPLY__INIT;
  *message = init_value;
}
size_t lodn__get_xattr_reply__get_packed_size
                     (const Lodn__GetXattrReply *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_reply__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__get_xattr_reply__pack
                     (const Lodn__GetXattrReply *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_reply__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__get_xattr_reply__pack_to_buffer
                     (const Lodn__GetXattrReply *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_reply__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__GetXattrReply *
       lodn__get_xattr_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__GetXattrReply *)
     protobuf_c_message_unpack (&lodn__get_xattr_reply__descriptor,
                                allocator, len, data);
}
void   lodn__get_xattr_reply__free_unpacked
                     (Lodn__GetXattrReply *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__get_xattr_reply__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__lo_dninfo_request_msg__init
                     (Lodn__LoDNInfoRequestMsg         *message)
{
  static Lodn__LoDNInfoRequestMsg init_value = LODN__LO_DNINFO_REQUEST_MSG__INIT;
  *message = init_value;
}
size_t lodn__lo_dninfo_request_msg__get_packed_size
                     (const Lodn__LoDNInfoRequestMsg *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_request_msg__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__lo_dninfo_request_msg__pack
                     (const Lodn__LoDNInfoRequestMsg *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_request_msg__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__lo_dninfo_request_msg__pack_to_buffer
                     (const Lodn__LoDNInfoRequestMsg *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_request_msg__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__LoDNInfoRequestMsg *
       lodn__lo_dninfo_request_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__LoDNInfoRequestMsg *)
     protobuf_c_message_unpack (&lodn__lo_dninfo_request_msg__descriptor,
                                allocator, len, data);
}
void   lodn__lo_dninfo_request_msg__free_unpacked
                     (Lodn__LoDNInfoRequestMsg *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_request_msg__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__lo_dninfo_msg__init
                     (Lodn__LoDNInfoMsg         *message)
{
  static Lodn__LoDNInfoMsg init_value = LODN__LO_DNINFO_MSG__INIT;
  *message = init_value;
}
size_t lodn__lo_dninfo_msg__get_packed_size
                     (const Lodn__LoDNInfoMsg *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_msg__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__lo_dninfo_msg__pack
                     (const Lodn__LoDNInfoMsg *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_msg__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__lo_dninfo_msg__pack_to_buffer
                     (const Lodn__LoDNInfoMsg *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_msg__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__LoDNInfoMsg *
       lodn__lo_dninfo_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__LoDNInfoMsg *)
     protobuf_c_message_unpack (&lodn__lo_dninfo_msg__descriptor,
                                allocator, len, data);
}
void   lodn__lo_dninfo_msg__free_unpacked
                     (Lodn__LoDNInfoMsg *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__lo_dninfo_msg__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
const ProtobufCEnumValue lodn__session_open_msg__encryption_method__enum_values_by_number[4] =
{
  { "PLAIN", "LODN__SESSION_OPEN_MSG__ENCRYPTION_METHOD__PLAIN", 0 },
  { "SSLv23", "LODN__SESSION_OPEN_MSG__ENCRYPTION_METHOD__SSLV23", 1 },
  { "SSLv3", "LODN__SESSION_OPEN_MSG__ENCRYPTION_METHOD__SSLV3", 2 },
  { "TLSv1", "LODN__SESSION_OPEN_MSG__ENCRYPTION_METHOD__TLSV1", 3 },
};
static const ProtobufCIntRange lodn__session_open_msg__encryption_method__value_ranges[] = {
{0, 0},{0, 4}
};
const ProtobufCEnumValueIndex lodn__session_open_msg__encryption_method__enum_values_by_name[4] =
{
  { "PLAIN", 0 },
  { "SSLv23", 1 },
  { "SSLv3", 2 },
  { "TLSv1", 3 },
};
const ProtobufCEnumDescriptor lodn__session_open_msg__encryption_method__descriptor =
{
  PROTOBUF_C_ENUM_DESCRIPTOR_MAGIC,
  "lodn.SessionOpenMsg.EncryptionMethod",
  "EncryptionMethod",
  "Lodn__SessionOpenMsg__EncryptionMethod",
  "lodn",
  4,
  lodn__session_open_msg__encryption_method__enum_values_by_number,
  4,
  lodn__session_open_msg__encryption_method__enum_values_by_name,
  1,
  lodn__session_open_msg__encryption_method__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__session_open_msg__field_descriptors[3] =
{
  {
    "sessionid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__SessionOpenMsg, has_sessionid),
    PROTOBUF_C_OFFSETOF(Lodn__SessionOpenMsg, sessionid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "encryptionmethod",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_ENUM,
    PROTOBUF_C_OFFSETOF(Lodn__SessionOpenMsg, n_encryptionmethod),
    PROTOBUF_C_OFFSETOF(Lodn__SessionOpenMsg, encryptionmethod),
    &lodn__session_open_msg__encryption_method__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "msgid",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__SessionOpenMsg, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__SessionOpenMsg, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__session_open_msg__field_indices_by_name[] = {
  1,   /* field[1] = encryptionMethod */
  2,   /* field[2] = msgID */
  0,   /* field[0] = sessionID */
};
static const ProtobufCIntRange lodn__session_open_msg__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor lodn__session_open_msg__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.SessionOpenMsg",
  "SessionOpenMsg",
  "Lodn__SessionOpenMsg",
  "lodn",
  sizeof(Lodn__SessionOpenMsg),
  3,
  lodn__session_open_msg__field_descriptors,
  lodn__session_open_msg__field_indices_by_name,
  1,  lodn__session_open_msg__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__session_closed_msg__field_descriptors[1] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__SessionClosedMsg, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__SessionClosedMsg, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__session_closed_msg__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
};
static const ProtobufCIntRange lodn__session_closed_msg__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor lodn__session_closed_msg__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.SessionClosedMsg",
  "SessionClosedMsg",
  "Lodn__SessionClosedMsg",
  "lodn",
  sizeof(Lodn__SessionClosedMsg),
  1,
  lodn__session_closed_msg__field_descriptors,
  lodn__session_closed_msg__field_indices_by_name,
  1,  lodn__session_closed_msg__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__response_msg__field_descriptors[3] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__ResponseMsg, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__ResponseMsg, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "errnum",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    PROTOBUF_C_OFFSETOF(Lodn__ResponseMsg, has_errnum),
    PROTOBUF_C_OFFSETOF(Lodn__ResponseMsg, errnum),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "errstr",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__ResponseMsg, errstr),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__response_msg__field_indices_by_name[] = {
  1,   /* field[1] = errnum */
  2,   /* field[2] = errstr */
  0,   /* field[0] = msgID */
};
static const ProtobufCIntRange lodn__response_msg__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor lodn__response_msg__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.ResponseMsg",
  "ResponseMsg",
  "Lodn__ResponseMsg",
  "lodn",
  sizeof(Lodn__ResponseMsg),
  3,
  lodn__response_msg__field_descriptors,
  lodn__response_msg__field_indices_by_name,
  1,  lodn__response_msg__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__mkdir_msg__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__MkdirMsg, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__MkdirMsg, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__MkdirMsg, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__mkdir_msg__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__mkdir_msg__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__mkdir_msg__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.mkdirMsg",
  "MkdirMsg",
  "Lodn__MkdirMsg",
  "lodn",
  sizeof(Lodn__MkdirMsg),
  2,
  lodn__mkdir_msg__field_descriptors,
  lodn__mkdir_msg__field_indices_by_name,
  1,  lodn__mkdir_msg__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__rmdir_request__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__RmdirRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__RmdirRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__RmdirRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__rmdir_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__rmdir_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__rmdir_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.RmdirRequest",
  "RmdirRequest",
  "Lodn__RmdirRequest",
  "lodn",
  sizeof(Lodn__RmdirRequest),
  2,
  lodn__rmdir_request__field_descriptors,
  lodn__rmdir_request__field_indices_by_name,
  1,  lodn__rmdir_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__create_file_request__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__CreateFileRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__CreateFileRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__CreateFileRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__create_file_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__create_file_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__create_file_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.CreateFileRequest",
  "CreateFileRequest",
  "Lodn__CreateFileRequest",
  "lodn",
  sizeof(Lodn__CreateFileRequest),
  2,
  lodn__create_file_request__field_descriptors,
  lodn__create_file_request__field_indices_by_name,
  1,  lodn__create_file_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_dir_request__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetDirRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetDirRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__GetDirRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_dir_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__get_dir_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__get_dir_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetDirRequest",
  "GetDirRequest",
  "Lodn__GetDirRequest",
  "lodn",
  sizeof(Lodn__GetDirRequest),
  2,
  lodn__get_dir_request__field_descriptors,
  lodn__get_dir_request__field_indices_by_name,
  1,  lodn__get_dir_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__dirent__field_descriptors[3] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Dirent, name),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "inode",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Dirent, has_inode),
    PROTOBUF_C_OFFSETOF(Lodn__Dirent, inode),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "type",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Dirent, has_type),
    PROTOBUF_C_OFFSETOF(Lodn__Dirent, type),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__dirent__field_indices_by_name[] = {
  1,   /* field[1] = inode */
  0,   /* field[0] = name */
  2,   /* field[2] = type */
};
static const ProtobufCIntRange lodn__dirent__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor lodn__dirent__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.Dirent",
  "Dirent",
  "Lodn__Dirent",
  "lodn",
  sizeof(Lodn__Dirent),
  3,
  lodn__dirent__field_descriptors,
  lodn__dirent__field_indices_by_name,
  1,  lodn__dirent__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_dir_reply__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetDirReply, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetDirReply, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "dirents",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__GetDirReply, n_dirents),
    PROTOBUF_C_OFFSETOF(Lodn__GetDirReply, dirents),
    &lodn__dirent__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_dir_reply__field_indices_by_name[] = {
  1,   /* field[1] = dirents */
  0,   /* field[0] = msgID */
};
static const ProtobufCIntRange lodn__get_dir_reply__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__get_dir_reply__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetDirReply",
  "GetDirReply",
  "Lodn__GetDirReply",
  "lodn",
  sizeof(Lodn__GetDirReply),
  2,
  lodn__get_dir_reply__field_descriptors,
  lodn__get_dir_reply__field_indices_by_name,
  1,  lodn__get_dir_reply__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__add_mappings_request__field_descriptors[3] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__AddMappingsRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__AddMappingsRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__AddMappingsRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "mappings",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__AddMappingsRequest, n_mappings),
    PROTOBUF_C_OFFSETOF(Lodn__AddMappingsRequest, mappings),
    &lodn__mapping__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__add_mappings_request__field_indices_by_name[] = {
  2,   /* field[2] = mappings */
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__add_mappings_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor lodn__add_mappings_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.AddMappingsRequest",
  "AddMappingsRequest",
  "Lodn__AddMappingsRequest",
  "lodn",
  sizeof(Lodn__AddMappingsRequest),
  3,
  lodn__add_mappings_request__field_descriptors,
  lodn__add_mappings_request__field_indices_by_name,
  1,  lodn__add_mappings_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_mappings_request__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetMappingsRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetMappingsRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__GetMappingsRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_mappings_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__get_mappings_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__get_mappings_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetMappingsRequest",
  "GetMappingsRequest",
  "Lodn__GetMappingsRequest",
  "lodn",
  sizeof(Lodn__GetMappingsRequest),
  2,
  lodn__get_mappings_request__field_descriptors,
  lodn__get_mappings_request__field_indices_by_name,
  1,  lodn__get_mappings_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_mappings_reply__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetMappingsReply, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetMappingsReply, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "mappings",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__GetMappingsReply, n_mappings),
    PROTOBUF_C_OFFSETOF(Lodn__GetMappingsReply, mappings),
    &lodn__mapping__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_mappings_reply__field_indices_by_name[] = {
  1,   /* field[1] = mappings */
  0,   /* field[0] = msgID */
};
static const ProtobufCIntRange lodn__get_mappings_reply__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__get_mappings_reply__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetMappingsReply",
  "GetMappingsReply",
  "Lodn__GetMappingsReply",
  "lodn",
  sizeof(Lodn__GetMappingsReply),
  2,
  lodn__get_mappings_reply__field_descriptors,
  lodn__get_mappings_reply__field_indices_by_name,
  1,  lodn__get_mappings_reply__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_stat_request__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetStatRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetStatRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__GetStatRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_stat_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__get_stat_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__get_stat_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetStatRequest",
  "GetStatRequest",
  "Lodn__GetStatRequest",
  "lodn",
  sizeof(Lodn__GetStatRequest),
  2,
  lodn__get_stat_request__field_descriptors,
  lodn__get_stat_request__field_indices_by_name,
  1,  lodn__get_stat_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_stat_reply__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetStatReply, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetStatReply, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "stat",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__GetStatReply, stat),
    &lodn__stat__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_stat_reply__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = stat */
};
static const ProtobufCIntRange lodn__get_stat_reply__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__get_stat_reply__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetStatReply",
  "GetStatReply",
  "Lodn__GetStatReply",
  "lodn",
  sizeof(Lodn__GetStatReply),
  2,
  lodn__get_stat_reply__field_descriptors,
  lodn__get_stat_reply__field_indices_by_name,
  1,  lodn__get_stat_reply__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__unlink_request__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__UnlinkRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__UnlinkRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__UnlinkRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__unlink_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = path */
};
static const ProtobufCIntRange lodn__unlink_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__unlink_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.UnlinkRequest",
  "UnlinkRequest",
  "Lodn__UnlinkRequest",
  "lodn",
  sizeof(Lodn__UnlinkRequest),
  2,
  lodn__unlink_request__field_descriptors,
  lodn__unlink_request__field_indices_by_name,
  1,  lodn__unlink_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__set_xattr_request__field_descriptors[6] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "name",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, name),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "value",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, has_value),
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, value),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "size",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, has_size),
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, size),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "position",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, has_position),
    PROTOBUF_C_OFFSETOF(Lodn__SetXAttrRequest, position),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__set_xattr_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  2,   /* field[2] = name */
  1,   /* field[1] = path */
  5,   /* field[5] = position */
  4,   /* field[4] = size */
  3,   /* field[3] = value */
};
static const ProtobufCIntRange lodn__set_xattr_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor lodn__set_xattr_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.SetXAttrRequest",
  "SetXAttrRequest",
  "Lodn__SetXAttrRequest",
  "lodn",
  sizeof(Lodn__SetXAttrRequest),
  6,
  lodn__set_xattr_request__field_descriptors,
  lodn__set_xattr_request__field_indices_by_name,
  1,  lodn__set_xattr_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_xattr_request__field_descriptors[5] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "path",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, path),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "name",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, name),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "size",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, has_size),
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, size),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "position",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, has_position),
    PROTOBUF_C_OFFSETOF(Lodn__GetXAttrRequest, position),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_xattr_request__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  2,   /* field[2] = name */
  1,   /* field[1] = path */
  4,   /* field[4] = position */
  3,   /* field[3] = size */
};
static const ProtobufCIntRange lodn__get_xattr_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor lodn__get_xattr_request__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetXAttrRequest",
  "GetXAttrRequest",
  "Lodn__GetXAttrRequest",
  "lodn",
  sizeof(Lodn__GetXAttrRequest),
  5,
  lodn__get_xattr_request__field_descriptors,
  lodn__get_xattr_request__field_indices_by_name,
  1,  lodn__get_xattr_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__get_xattr_reply__field_descriptors[2] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__GetXattrReply, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__GetXattrReply, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "value",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    PROTOBUF_C_OFFSETOF(Lodn__GetXattrReply, has_value),
    PROTOBUF_C_OFFSETOF(Lodn__GetXattrReply, value),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__get_xattr_reply__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
  1,   /* field[1] = value */
};
static const ProtobufCIntRange lodn__get_xattr_reply__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__get_xattr_reply__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.GetXattrReply",
  "GetXattrReply",
  "Lodn__GetXattrReply",
  "lodn",
  sizeof(Lodn__GetXattrReply),
  2,
  lodn__get_xattr_reply__field_descriptors,
  lodn__get_xattr_reply__field_indices_by_name,
  1,  lodn__get_xattr_reply__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__lo_dninfo_request_msg__field_descriptors[1] =
{
  {
    "msgid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__LoDNInfoRequestMsg, has_msgid),
    PROTOBUF_C_OFFSETOF(Lodn__LoDNInfoRequestMsg, msgid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__lo_dninfo_request_msg__field_indices_by_name[] = {
  0,   /* field[0] = msgID */
};
static const ProtobufCIntRange lodn__lo_dninfo_request_msg__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor lodn__lo_dninfo_request_msg__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.LoDNInfoRequestMsg",
  "LoDNInfoRequestMsg",
  "Lodn__LoDNInfoRequestMsg",
  "lodn",
  sizeof(Lodn__LoDNInfoRequestMsg),
  1,
  lodn__lo_dninfo_request_msg__field_descriptors,
  lodn__lo_dninfo_request_msg__field_indices_by_name,
  1,  lodn__lo_dninfo_request_msg__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__lo_dninfo_msg__version__field_descriptors[3] =
{
  {
    "major",
    1,
    PROTOBUF_C_LABEL_REQUIRED,
    PROTOBUF_C_TYPE_UINT32,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__LoDNInfoMsg__Version, major),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "minor",
    2,
    PROTOBUF_C_LABEL_REQUIRED,
    PROTOBUF_C_TYPE_UINT32,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__LoDNInfoMsg__Version, minor),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "subminor",
    3,
    PROTOBUF_C_LABEL_REQUIRED,
    PROTOBUF_C_TYPE_UINT32,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__LoDNInfoMsg__Version, subminor),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__lo_dninfo_msg__version__field_indices_by_name[] = {
  0,   /* field[0] = major */
  1,   /* field[1] = minor */
  2,   /* field[2] = subminor */
};
static const ProtobufCIntRange lodn__lo_dninfo_msg__version__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor lodn__lo_dninfo_msg__version__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.LoDNInfoMsg.Version",
  "Version",
  "Lodn__LoDNInfoMsg__Version",
  "lodn",
  sizeof(Lodn__LoDNInfoMsg__Version),
  3,
  lodn__lo_dninfo_msg__version__field_descriptors,
  lodn__lo_dninfo_msg__version__field_indices_by_name,
  1,  lodn__lo_dninfo_msg__version__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__lo_dninfo_msg__field_descriptors[1] =
{
  {
    "version",
    1,
    PROTOBUF_C_LABEL_REQUIRED,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__LoDNInfoMsg, version),
    &lodn__lo_dninfo_msg__version__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__lo_dninfo_msg__field_indices_by_name[] = {
  0,   /* field[0] = version */
};
static const ProtobufCIntRange lodn__lo_dninfo_msg__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor lodn__lo_dninfo_msg__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.LoDNInfoMsg",
  "LoDNInfoMsg",
  "Lodn__LoDNInfoMsg",
  "lodn",
  sizeof(Lodn__LoDNInfoMsg),
  1,
  lodn__lo_dninfo_msg__field_descriptors,
  lodn__lo_dninfo_msg__field_indices_by_name,
  1,  lodn__lo_dninfo_msg__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
