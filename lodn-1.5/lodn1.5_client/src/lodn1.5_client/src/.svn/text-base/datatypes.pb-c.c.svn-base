/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#include "datatypes.pb-c.h"
void   lodn__stat__init
                     (Lodn__Stat         *message)
{
  static Lodn__Stat init_value = LODN__STAT__INIT;
  *message = init_value;
}
size_t lodn__stat__get_packed_size
                     (const Lodn__Stat *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__stat__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__stat__pack
                     (const Lodn__Stat *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__stat__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__stat__pack_to_buffer
                     (const Lodn__Stat *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__stat__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__Stat *
       lodn__stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__Stat *)
     protobuf_c_message_unpack (&lodn__stat__descriptor,
                                allocator, len, data);
}
void   lodn__stat__free_unpacked
                     (Lodn__Stat *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__stat__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__capability__init
                     (Lodn__Capability         *message)
{
  static Lodn__Capability init_value = LODN__CAPABILITY__INIT;
  *message = init_value;
}
size_t lodn__capability__get_packed_size
                     (const Lodn__Capability *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__capability__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__capability__pack
                     (const Lodn__Capability *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__capability__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__capability__pack_to_buffer
                     (const Lodn__Capability *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__capability__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__Capability *
       lodn__capability__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__Capability *)
     protobuf_c_message_unpack (&lodn__capability__descriptor,
                                allocator, len, data);
}
void   lodn__capability__free_unpacked
                     (Lodn__Capability *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__capability__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__metadata__init
                     (Lodn__Metadata         *message)
{
  static Lodn__Metadata init_value = LODN__METADATA__INIT;
  *message = init_value;
}
size_t lodn__metadata__get_packed_size
                     (const Lodn__Metadata *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__metadata__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__metadata__pack
                     (const Lodn__Metadata *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__metadata__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__metadata__pack_to_buffer
                     (const Lodn__Metadata *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__metadata__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__Metadata *
       lodn__metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__Metadata *)
     protobuf_c_message_unpack (&lodn__metadata__descriptor,
                                allocator, len, data);
}
void   lodn__metadata__free_unpacked
                     (Lodn__Metadata *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__metadata__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__function__init
                     (Lodn__Function         *message)
{
  static Lodn__Function init_value = LODN__FUNCTION__INIT;
  *message = init_value;
}
size_t lodn__function__get_packed_size
                     (const Lodn__Function *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__function__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__function__pack
                     (const Lodn__Function *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__function__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__function__pack_to_buffer
                     (const Lodn__Function *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__function__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__Function *
       lodn__function__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__Function *)
     protobuf_c_message_unpack (&lodn__function__descriptor,
                                allocator, len, data);
}
void   lodn__function__free_unpacked
                     (Lodn__Function *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__function__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__mapping__init
                     (Lodn__Mapping         *message)
{
  static Lodn__Mapping init_value = LODN__MAPPING__INIT;
  *message = init_value;
}
size_t lodn__mapping__get_packed_size
                     (const Lodn__Mapping *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mapping__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__mapping__pack
                     (const Lodn__Mapping *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mapping__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__mapping__pack_to_buffer
                     (const Lodn__Mapping *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mapping__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__Mapping *
       lodn__mapping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__Mapping *)
     protobuf_c_message_unpack (&lodn__mapping__descriptor,
                                allocator, len, data);
}
void   lodn__mapping__free_unpacked
                     (Lodn__Mapping *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__mapping__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   lodn__exnode__init
                     (Lodn__Exnode         *message)
{
  static Lodn__Exnode init_value = LODN__EXNODE__INIT;
  *message = init_value;
}
size_t lodn__exnode__get_packed_size
                     (const Lodn__Exnode *message)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__exnode__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t lodn__exnode__pack
                     (const Lodn__Exnode *message,
                      uint8_t       *out)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__exnode__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t lodn__exnode__pack_to_buffer
                     (const Lodn__Exnode *message,
                      ProtobufCBuffer *buffer)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__exnode__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
Lodn__Exnode *
       lodn__exnode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (Lodn__Exnode *)
     protobuf_c_message_unpack (&lodn__exnode__descriptor,
                                allocator, len, data);
}
void   lodn__exnode__free_unpacked
                     (Lodn__Exnode *message,
                      ProtobufCAllocator *allocator)
{
  PROTOBUF_C_ASSERT (message->base.descriptor == &lodn__exnode__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
static const ProtobufCFieldDescriptor lodn__stat__field_descriptors[9] =
{
  {
    "inode",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_inode),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, inode),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "mode",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_mode),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, mode),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "nlinks",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_nlinks),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, nlinks),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "size",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_size),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, size),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "blocks",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_blocks),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, blocks),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "atime",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_atime),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, atime),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "mtime",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_mtime),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, mtime),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "ctime",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_ctime),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, ctime),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "btime",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Stat, has_btime),
    PROTOBUF_C_OFFSETOF(Lodn__Stat, btime),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__stat__field_indices_by_name[] = {
  5,   /* field[5] = atime */
  4,   /* field[4] = blocks */
  8,   /* field[8] = btime */
  7,   /* field[7] = ctime */
  0,   /* field[0] = inode */
  1,   /* field[1] = mode */
  6,   /* field[6] = mtime */
  2,   /* field[2] = nlinks */
  3,   /* field[3] = size */
};
static const ProtobufCIntRange lodn__stat__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 9 }
};
const ProtobufCMessageDescriptor lodn__stat__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.Stat",
  "Stat",
  "Lodn__Stat",
  "lodn",
  sizeof(Lodn__Stat),
  9,
  lodn__stat__field_descriptors,
  lodn__stat__field_indices_by_name,
  1,  lodn__stat__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
const ProtobufCEnumValue lodn__capability__wrm__enum_values_by_number[3] =
{
  { "WRITE", "LODN__CAPABILITY__WRM__WRITE", 0 },
  { "READ", "LODN__CAPABILITY__WRM__READ", 1 },
  { "MANAGE", "LODN__CAPABILITY__WRM__MANAGE", 2 },
};
static const ProtobufCIntRange lodn__capability__wrm__value_ranges[] = {
{0, 0},{0, 3}
};
const ProtobufCEnumValueIndex lodn__capability__wrm__enum_values_by_name[3] =
{
  { "MANAGE", 2 },
  { "READ", 1 },
  { "WRITE", 0 },
};
const ProtobufCEnumDescriptor lodn__capability__wrm__descriptor =
{
  PROTOBUF_C_ENUM_DESCRIPTOR_MAGIC,
  "lodn.Capability.WRM",
  "WRM",
  "Lodn__Capability__WRM",
  "lodn",
  3,
  lodn__capability__wrm__enum_values_by_number,
  3,
  lodn__capability__wrm__enum_values_by_name,
  1,
  lodn__capability__wrm__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__capability__field_descriptors[6] =
{
  {
    "host",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Capability, host),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "port",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Capability, has_port),
    PROTOBUF_C_OFFSETOF(Lodn__Capability, port),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "rid",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Capability, rid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "key",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Capability, key),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "wrm_key",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Capability, wrm_key),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "wrm",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    PROTOBUF_C_OFFSETOF(Lodn__Capability, has_wrm),
    PROTOBUF_C_OFFSETOF(Lodn__Capability, wrm),
    &lodn__capability__wrm__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__capability__field_indices_by_name[] = {
  0,   /* field[0] = host */
  3,   /* field[3] = key */
  1,   /* field[1] = port */
  2,   /* field[2] = rid */
  5,   /* field[5] = wrm */
  4,   /* field[4] = wrm_key */
};
static const ProtobufCIntRange lodn__capability__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor lodn__capability__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.Capability",
  "Capability",
  "Lodn__Capability",
  "lodn",
  sizeof(Lodn__Capability),
  6,
  lodn__capability__field_descriptors,
  lodn__capability__field_indices_by_name,
  1,  lodn__capability__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
const ProtobufCEnumValue lodn__metadata__type__enum_values_by_number[5] =
{
  { "NONE", "LODN__METADATA__TYPE__NONE", 0 },
  { "STRING", "LODN__METADATA__TYPE__STRING", 1 },
  { "INTEGER", "LODN__METADATA__TYPE__INTEGER", 2 },
  { "DOUBLE", "LODN__METADATA__TYPE__DOUBLE", 3 },
  { "METADATA", "LODN__METADATA__TYPE__METADATA", 4 },
};
static const ProtobufCIntRange lodn__metadata__type__value_ranges[] = {
{0, 0},{0, 5}
};
const ProtobufCEnumValueIndex lodn__metadata__type__enum_values_by_name[5] =
{
  { "DOUBLE", 3 },
  { "INTEGER", 2 },
  { "METADATA", 4 },
  { "NONE", 0 },
  { "STRING", 1 },
};
const ProtobufCEnumDescriptor lodn__metadata__type__descriptor =
{
  PROTOBUF_C_ENUM_DESCRIPTOR_MAGIC,
  "lodn.Metadata.Type",
  "Type",
  "Lodn__Metadata__Type",
  "lodn",
  5,
  lodn__metadata__type__enum_values_by_number,
  5,
  lodn__metadata__type__enum_values_by_name,
  1,
  lodn__metadata__type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__metadata__field_descriptors[3] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Metadata, name),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "type",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    PROTOBUF_C_OFFSETOF(Lodn__Metadata, has_type),
    PROTOBUF_C_OFFSETOF(Lodn__Metadata, type),
    &lodn__metadata__type__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "value",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Metadata, value),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__metadata__field_indices_by_name[] = {
  0,   /* field[0] = name */
  1,   /* field[1] = type */
  2,   /* field[2] = value */
};
static const ProtobufCIntRange lodn__metadata__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor lodn__metadata__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.Metadata",
  "Metadata",
  "Lodn__Metadata",
  "lodn",
  sizeof(Lodn__Metadata),
  3,
  lodn__metadata__field_descriptors,
  lodn__metadata__field_indices_by_name,
  1,  lodn__metadata__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__function__field_descriptors[4] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Function, name),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "metadata",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__Function, n_metadata),
    PROTOBUF_C_OFFSETOF(Lodn__Function, metadata),
    &lodn__metadata__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "arguments",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__Function, n_arguments),
    PROTOBUF_C_OFFSETOF(Lodn__Function, arguments),
    &lodn__metadata__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "subfunction",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Function, subfunction),
    &lodn__function__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__function__field_indices_by_name[] = {
  2,   /* field[2] = arguments */
  1,   /* field[1] = metadata */
  0,   /* field[0] = name */
  3,   /* field[3] = subfunction */
};
static const ProtobufCIntRange lodn__function__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor lodn__function__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.Function",
  "Function",
  "Lodn__Function",
  "lodn",
  sizeof(Lodn__Function),
  4,
  lodn__function__field_descriptors,
  lodn__function__field_indices_by_name,
  1,  lodn__function__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__mapping__field_descriptors[14] =
{
  {
    "alloc_length",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, has_alloc_length),
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, alloc_length),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "alloc_offset",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, has_alloc_offset),
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, alloc_offset),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "e2e_blocksize",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, has_e2e_blocksize),
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, e2e_blocksize),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "exnode_offset",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, has_exnode_offset),
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, exnode_offset),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "logical_length",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, has_logical_length),
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, logical_length),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "host",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, host),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "port",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, has_port),
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, port),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "rid",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, rid),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "readkey",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, readkey),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "writekey",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, writekey),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "managekey",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, managekey),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "wrm_key",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, wrm_key),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "metadata",
    13,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, n_metadata),
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, metadata),
    &lodn__metadata__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "function",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    PROTOBUF_C_OFFSETOF(Lodn__Mapping, function),
    NULL,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__mapping__field_indices_by_name[] = {
  0,   /* field[0] = alloc_length */
  1,   /* field[1] = alloc_offset */
  2,   /* field[2] = e2e_blocksize */
  3,   /* field[3] = exnode_offset */
  13,   /* field[13] = function */
  5,   /* field[5] = host */
  4,   /* field[4] = logical_length */
  10,   /* field[10] = managekey */
  12,   /* field[12] = metadata */
  6,   /* field[6] = port */
  8,   /* field[8] = readkey */
  7,   /* field[7] = rid */
  9,   /* field[9] = writekey */
  11,   /* field[11] = wrm_key */
};
static const ProtobufCIntRange lodn__mapping__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 14 }
};
const ProtobufCMessageDescriptor lodn__mapping__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.Mapping",
  "Mapping",
  "Lodn__Mapping",
  "lodn",
  sizeof(Lodn__Mapping),
  14,
  lodn__mapping__field_descriptors,
  lodn__mapping__field_indices_by_name,
  1,  lodn__mapping__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
static const ProtobufCFieldDescriptor lodn__exnode__field_descriptors[2] =
{
  {
    "metadata",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__Exnode, n_metadata),
    PROTOBUF_C_OFFSETOF(Lodn__Exnode, metadata),
    &lodn__metadata__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
  {
    "mappings",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    PROTOBUF_C_OFFSETOF(Lodn__Exnode, n_mappings),
    PROTOBUF_C_OFFSETOF(Lodn__Exnode, mappings),
    &lodn__mapping__descriptor,
    NULL,
    NULL,NULL    /* reserved1, reserved2 */
  },
};
static const unsigned lodn__exnode__field_indices_by_name[] = {
  1,   /* field[1] = mappings */
  0,   /* field[0] = metadata */
};
static const ProtobufCIntRange lodn__exnode__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor lodn__exnode__descriptor =
{
  PROTOBUF_C_MESSAGE_DESCRIPTOR_MAGIC,
  "lodn.Exnode",
  "Exnode",
  "Lodn__Exnode",
  "lodn",
  sizeof(Lodn__Exnode),
  2,
  lodn__exnode__field_descriptors,
  lodn__exnode__field_indices_by_name,
  1,  lodn__exnode__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[1234] */
};
