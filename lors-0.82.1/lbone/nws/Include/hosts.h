/* $Id: hosts.h,v 1.22 2000/04/04 18:17:55 hayes Exp $ */

#ifndef HOST_H
#define HOST_H

#include <stddef.h>     /* offsetof() */
#include "protocol.h"   /* Socket */
#include "messages.h"   /* Message number ranges */
#include "formatutil.h" /* DataDescriptor */


/*
** Messages recognized and/or generated by all NWS hosts:
**
** HOST_TEST(void) -- sent to the host process to request that it check its
**   status with the name server.  The host replies with a HOST_TEST_RESULT
**   message.
** HOST_TEST_RESULT(testInfo) -- sent from the host process as the reply to a
**   HOST_TEST message.  #testInfo# is a HostInfo struct (see below) containing
**   information about the host.
** HOST_DIAGNOSTICS(which) -- sent to the host process to request that the
**   production of certain diagnostic messages be toggled on or off.  #which#
**   is a signed integer that indicates which levels of diagnostics should be
**   toggled; presently supported values are the ALL_DIAGNOSTICS, ALL_ERRORS,
**   and ALL_LOGS constants listed below.  The host replies with a
**   HOST_DIAGNOSTICS_ACK message.
** HOST_DIAGNOSTICS_ACK(void) -- sent from the host process as the successful
**   reply to a HOST_DIAGNOSTICS message.
** HOST_DIE([password]) -- sent to the host process to request that it exit.
**   The host replies with a HOST_DYING message and exits if it has no die
**   password or if a matching #password# (a null-terminated string)
**   accompanies the message; otherwise, it replies with a HOST_REFUSED message.
** HOST_DYING(void) -- sent from the host process as the successful reply to a
**   HOST_DIE message.
** HOST_REGISTER(hostSpec) -- sent to a host to direct it to change its
**   registration to the enclosed name server.  The host responds with either
**   a HOST_REGISTERED, a HOST_REFUSED, or a HOST_FAILED message.
** HOST_REGISTERED(void) -- send from the host process as the successful reply
**   to a HOST_REGISTER message.
** HOST_FAILED(void) -- sent from the host as an unsuccessful reply to a
**   request.
** HOST_REFUSED(void) -- sent from the host as an unsuccessful reply to a
**   request.  Presently sent only in response to a HOST_DIE message that does
**   not include the proper password.
*/

#define HOST_TEST             ALLHOSTS_FIRST_MESSAGE
#define HOST_TEST_RESULT      (HOST_TEST + 1)

#define HOST_DIAGNOSTICS      (HOST_TEST_RESULT + 1)
#define HOST_DIAGNOSTICS_ACK  (HOST_DIAGNOSTICS + 1)

#define HOST_DIE              (HOST_DIAGNOSTICS_ACK + 1)
#define HOST_DYING            (HOST_DIE + 1)

#define HOST_REGISTER         (HOST_DYING + 1)
#define HOST_REGISTERED       (HOST_REGISTER + 1)

#define HOST_FAILED           ALLHOSTS_LAST_MESSAGE
#define HOST_REFUSED          (HOST_FAILED - 1)


/* Supported values for the HOST_DIAGNOSTICS message #which# parameter. */
#define ALL_ERRORS      -1
#define ALL_LOGS        -2
#define ALL_DIAGNOSTICS -3


/* Arbitrary limitation on machine name size. */
#define MAX_MACHINE_NAME 64
/* Port numbers go up to 65535. */
#define MAX_PORT_IMAGE 5

/* Limit on host name size, including colon and port */
#define MAX_HOST_NAME (MAX_MACHINE_NAME + 1 + MAX_PORT_IMAGE)

/* Number of seconds between host registrations. */
#define DEFAULT_HOST_BEAT (15 * 60)
#define SHORT_HOST_BEAT (2 * 60)


/* Note: unsigned int (not enum) here so sizeof(HostTypes) is well-known. */
typedef unsigned int HostTypes;
#define FORECASTER_HOST 0
#define MEMORY_HOST 1
#define NAME_SERVER_HOST 2
#define SENSOR_HOST 3


struct host_desc {
  char host_name[MAX_MACHINE_NAME];
  unsigned short port;
};


struct host_cookie {
  char name[MAX_MACHINE_NAME];
  unsigned short port;
  Socket sd;
};


/*
** A HostInfo struct accompanies the HOST_TEST_RESULT message.
** #registrationName# is the name under which this host is registered with its
** name server; #hostType# is the kind of host; #nameServer# specifies where
** its registration lives; and #healthy# indicates whether the registration
** information cached locally matches that stored with the name server.
*/
typedef struct {
  char registrationName[MAX_HOST_NAME];
  HostTypes hostType;
  char nameServer[MAX_HOST_NAME];
  unsigned int healthy;
} HostInfo;
static const DataDescriptor hostInfoDescriptor[] =
  {SIMPLE_MEMBER(CHAR_TYPE, MAX_HOST_NAME,
                 offsetof(HostInfo, registrationName)),
   SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1, offsetof(HostInfo, hostType)),
   SIMPLE_MEMBER(CHAR_TYPE, MAX_HOST_NAME, offsetof(HostInfo, nameServer)),
   SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1, offsetof(HostInfo, healthy))};
#define hostInfoDescriptorLength 4


#endif
