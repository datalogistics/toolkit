/* $Id: nws_forecast.h,v 1.9 1999/10/26 23:35:42 hayes Exp $ */

#ifndef FORECASTER_H
#define FORECASTER_H


#include "hosts.h"        /* MAX_HOST_NAME */
#include "nws_memory.h"   /* STATE_NAME_SIZE */
#include "formatutil.h"   /* DataDescriptor */
#include "messages.h"     /* Message number ranges */
#include "forecast_api.h" /* ForecastCollection Measurement */


#define FORECAST_NAME_SIZE STATE_NAME_SIZE


/*
** Messages recognized and/or generated by nws_forecast.
**
** FORE_DATA(header,measurementList) -- sent to the nws_forecast process to
**   request that it use the enclosed measurements to generate and return
**   a forecast.  #header# is a ForecastDataHeader (below), #measurementList# a
**   series of Measurement (see forecast_api.h) structs.  nws_forecast responds
**   with either a FORE_FORECAST or FORE_FAIL message depending on its success.
** FORE_FAIL(void) -- generated by the nws_forecast process as the unsuccessful
**   reply to a FORE_DATA or FORE_SERIES message.
** FORE_FORECAST(forecastList) -- generated by the nws_forecast process as the
**   successful reply to a FORE_DATA or FORE_SERIES message.  #forecastList# is
**   a set of ForecastHeader (below) structs, each of which is followed by a
**   set of ForecastCollection (see forecast_api.h) structs.  The length of
**   this list will be 1 for FORE_DATA replies and equal to the series count
**   for FORE_SERIES replies.
** FORE_SERIES(count,seriesList) -- sent to the nws_forecast process to request
**   that it generate and return forecasts for the enclosed list of NWS
**   experiment series.  #count# is an unsigned int that indicates how many
**   ForecastSeries (below) are in #seriesList#.  nws_forecast replies with
**   either a FORE_FORECAST or a FORE_FAIL message depending on success.
** METHODS_ASK(void) -- sent to the nws_forecast process to request that it
**   transmit a method index list.  nws_forecast responds with a METHODS_TELL
**   message.
** METHODS_TELL(nameList) -- generated by the nws_forecast process as the reply
**   to the METHODS_ASK message.  #nameList# is a string that contains a tab-
**   delimited list of names describing each forcasting method.
*/

#define FORE_DATA     FORECASTER_FIRST_MESSAGE
#define FORE_FORECAST (FORE_DATA + 1)
#define FORE_SERIES   (FORE_FORECAST + 1)
#define METHODS_ASK   (FORE_SERIES + 1)
#define METHODS_TELL  (METHODS_ASK + 1)

#define FORE_FAIL     FORECASTER_LAST_MESSAGE


static const DataDescriptor measurementDescriptor[] =
  {SIMPLE_MEMBER(DOUBLE_TYPE, 1, offsetof(FORECASTAPI_Measurement, timeStamp)),
   SIMPLE_MEMBER(DOUBLE_TYPE,1,offsetof(FORECASTAPI_Measurement,measurement))};
#define measurementDescriptorLength 2
static const DataDescriptor forecastDescriptor[] =
  {SIMPLE_MEMBER(DOUBLE_TYPE, 1, offsetof(FORECASTAPI_Forecast, forecast)),
   SIMPLE_MEMBER(DOUBLE_TYPE, 1, offsetof(FORECASTAPI_Forecast, error)),
   SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1,
                 offsetof(FORECASTAPI_Forecast, methodUsed))};
#define forecastDescriptorLength 3
static const DataDescriptor forecastCollectionDescriptor[] =
  {{STRUCT_TYPE, 1, offsetof(FORECASTAPI_ForecastCollection, measurement),
    (DataDescriptor *)measurementDescriptor, measurementDescriptorLength,
    PAD_BYTES(FORECASTAPI_Measurement, measurement, double, 1)},
   {STRUCT_TYPE, FORECASTAPI_FORECAST_TYPE_COUNT,
    offsetof(FORECASTAPI_ForecastCollection, forecasts),
    (DataDescriptor *)forecastDescriptor, forecastDescriptorLength,
    PAD_BYTES(FORECASTAPI_Forecast, methodUsed, unsigned int, 1)}};
#define forecastCollectionDescriptorLength 2


/*
** The FORE_DATA message is accompanied by a ForecastDataHeader.
** #moreToCome# is a boolean that indicates that the requester may be
** requesting forecasts for data with the same name again in the near future; a
** false value indicates that the forecaster may discard forecast information
** after returning the forecast.  #atMost# indicates the maximum length of the
** forecast time series that the requester wants returned.  #forecastName#
** field names the data for the FORE_FORECAST reply, and the #measurementCount#
** field indicates how many Experiment structures follow the header.
*/
typedef struct {
  unsigned int moreToCome;
  unsigned int atMost;
  char forecastName[FORECAST_NAME_SIZE];
  unsigned int measurementCount;
} ForecastDataHeader;
static const DataDescriptor forecastDataHeaderDescriptor[] =
  {SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1, offsetof(ForecastDataHeader,moreToCome)),
   SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1, offsetof(ForecastDataHeader, atMost)),
   SIMPLE_MEMBER(CHAR_TYPE, FORECAST_NAME_SIZE,
                 offsetof(ForecastDataHeader, forecastName)),
   SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1,
                 offsetof(ForecastDataHeader, measurementCount))};
#define forecastDataHeaderDescriptorLength 4


/*
** The FORE_FORECAST message is accompanied by a list of ForecastHeaders.
** The #forecastName# field names the data series being forecast; it is copied
** from the forecastName field of either the ForecastDataHeader (FORE_DATA) or
** the ForecastSeries (FORE_SERIES).  #forecastCount# indicates how many
** ForecastCollection structures follow.  For FORE_SERIES replies, the elements
** of this list are ordered newest to oldest; for FORE_DATA replies, the order
** is the same as the data that accompanied the FORE_DATA message.
*/
typedef struct {
  char forecastName[FORECAST_NAME_SIZE];
  unsigned int forecastCount;
} ForecastHeader;
static const DataDescriptor forecastHeaderDescriptor[] =
  {SIMPLE_MEMBER(CHAR_TYPE, FORECAST_NAME_SIZE,
                 offsetof(ForecastHeader, forecastName)),
   SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1,
                 offsetof(ForecastHeader, forecastCount))};
#define forecastHeaderDescriptorLength 2


/*
** The FORE_SERIES message is accompanied by a list of ForeSeries.
** #moreToCome# is a boolean that indicates that the requester may be
** requesting the same forecasts again in the near future; a false value
** indicates that the forecaster may discard forecast information after
** returning the forecast.  #atMost# indicates the maximum length of the
** forecast time series that the requester wants returned.  #forecastName#
** field names the data for the FORE_FORECAST reply, the #memoryName# field is
** a host name (DNSname:port or IPaddress:port) naming the memory that holds
** the data, and #seriesName# is the memory's name for the series.
*/
typedef struct {
  unsigned int moreToCome;
  unsigned int atMost;
  char forecastName[FORECAST_NAME_SIZE];
  char memoryName[MAX_HOST_NAME];
  char seriesName[STATE_NAME_SIZE];
} ForecastSeries;
static const DataDescriptor forecastSeriesDescriptor[] =
  {SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1, offsetof(ForecastSeries, moreToCome)),
   SIMPLE_MEMBER(UNSIGNED_INT_TYPE, 1, offsetof(ForecastSeries, atMost)),
   SIMPLE_MEMBER(CHAR_TYPE, FORECAST_NAME_SIZE,
                 offsetof(ForecastSeries, forecastName)),
   SIMPLE_MEMBER(CHAR_TYPE, MAX_HOST_NAME,
                 offsetof(ForecastSeries, memoryName)),
   SIMPLE_MEMBER(CHAR_TYPE, STATE_NAME_SIZE,
                 offsetof(ForecastSeries, seriesName))};
#define forecastSeriesDescriptorLength 5


#endif
