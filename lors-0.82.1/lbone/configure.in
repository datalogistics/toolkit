dnl Process this file with autoconf to produce a configure script.
AC_INIT(INSTALL)

dnl Checks for system
AC_CANONICAL_SYSTEM

case "$build_os" in
linux*)
    OSTYPE="Linux"
    OSDEF="_LINUX"
    ;;
solaris*)
    OSTYPE="SunOS"
    OSDEF="_SUNOS"
    ;;
sunos*)
    OSTYPE="SunOS"
    OSDEF="_SUNOS"
    ;;
aix*)
    OSTYPE="AIX"
    OSDEF="_AIX"
    ;;
macos*)
    OSTYPE="Darwin"
    OSDEF="_DARWIN"
    ;;
darwin*)
    OSTYPE="Darwin"
    OSDEF="_DARWIN"
	;;
cygwin*)
    OSTYPE="Cygwin"
    OSDEF="_CYGWIN"
	;;
esac
AC_SUBST(OSTYPE)
AC_SUBST(OSDEF)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(lbone_lib,0.5)
AC_PREFIX_DEFAULT("`pwd`/local")
dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB


dnl Checks for libraries.
dnl Replace `main' with a function in -lcrypt:
dnl AC_CHECK_LIB(crypt, main)
dnl Replace `main' with a function in -ldl:
dnl AC_CHECK_LIB(dl, main)
dnl Replace `main' with a function in -llber:
AC_CHECK_LIB(lber, ber_error_print,,AC_MSG_WARN(Could not find liblber))
dnl Replace `main' with a function in -lldap:
AC_CHECK_LIB(ldap, ldap_init,,AC_MSG_WARN(Could not find libldap))
dnl Replace `main' with a function in -lm:
AC_CHECK_LIB(m, main)
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, main)
dnl Replace `main' with a function in -lperl:
dnl AC_CHECK_LIB(perl, main)
dnl Replace `main' with a function in -lposix4:
AC_CHECK_LIB(posix4, main)
dnl Replace `main' with a function in -lpthread:
AC_CHECK_LIB(pthread, main)
dnl Replace `main' with a function in -lresolv:
AC_CHECK_LIB(resolv, main)
dnl Replace `main' with a function in -lsocket:
AC_CHECK_LIB(socket, main)
dnl Replace `main' with a function in -lssl:
dnl AC_CHECK_LIB(ssl, main)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h strings.h sys/file.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_FUNC_GETPGRP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gethostname gettimeofday mkdir select socket strcspn strdup strerror strstr strtod strtol strtoul uname)

dnl new functions for finding files
AC_DEFUN(AC_FIND_FILE,
[AC_MSG_CHECKING( for $1)
if test -r $1; then
    AC_MSG_RESULT(found)
    $2
else
    AC_MSG_RESULT(no)
    $3
fi])

PREFIX="`pwd`"
if test "$prefix" = "NONE"; then
    INS_DIR="$ac_default_prefix"
else
    INS_DIR="$prefix"
fi

dnl provide a conditional directive to build the server or no.
AC_ARG_ENABLE(server,
[  --enable-server    Build the lbone_server],
[case "${enableval}" in 
  yes) server=true ;;
  no)  server=false ;;
  *) AC_MSG_ERROR(bad value ${enableeval} for --enable-server) ;;
esac], [server=false])
AM_CONDITIONAL(SERVER, test x$server = xtrue)

dnl check and setup path of ibp package
AC_ARG_WITH(ldaplib, [  --with-ldaplib=path   path to root of ldap libraries.],
            LDAPDIR="$with_ldaplib",
            LDAPDIR="/usr")
AC_SUBST(LDAPDIR)

AC_ARG_WITH(ecgilib, [  --with-ecgilib=path   path to ecgi library.],
            CGIDIR="$with_ecgilib",
            CGIDIR="`pwd`/ecgi")
AC_SUBST(CGIDIR)

AC_ARG_WITH(nwsdir,[  --with-nwsdir=path      path to nws root directory],
            NWSDIR="$with_nwsdir",
            NWSDIR="`pwd`/nws")
AC_SUBST(NWSDIR)

if test "$server" = "true"; then
    AC_FIND_FILE("${NWSDIR}/libnws.a",
            LORS_BUILD_NWS="no",
            AC_FIND_FILE("${PREFIX}/nws/Sensor/nws_sensor.c",
                          LORS_BUILD_NWS="yes"
                          LORS_NWS_SRC_DIR="${PREFIX}/nws"
                          NWSDIR="${PREFIX}/nws",
                          AC_MSG_ERROR("Can not find nws package")))
    AC_SUBST(LORS_BUILD_NWS)
    AC_SUBST(NWSDIR)
    AC_SUBST(LORS_NWS_SRC_DIR)

    AC_FIND_FILE("${CGIDIR}/libecgi.a",
            LORS_BUILD_ECGI="no",
            AC_FIND_FILE("${PREFIX}/ecgi/src/ecgi.c",
                          LORS_BUILD_ECGI="yes"
                          LORS_ECGI_SRC_DIR="${PREFIX}/ecgi"
                          CGIDIR="${PREFIX}/ecgi",
                          AC_MSG_ERROR("Can not find ecgi package")))
    AC_SUBST(LORS_BUILD_ECGI)
    AC_SUBST(CGIDIR)
    AC_SUBST(LORS_ECGI_SRC_DIR)
else
    LORS_BUILD_NWS="no",
    AC_SUBST(LORS_BUILD_NWS)
    LORS_BUILD_ECGI="no",
    AC_SUBST(LORS_BUILD_ECGI)
fi

AC_ARG_WITH(libibp,[  --with-libibp=path      path to ibp client lib ("./ibp")],
            IBPDIR="$with_libibp",
            IBPDIR="`pwd`/ibp")
AC_SUBST(IBPDIR)

AC_FIND_FILE("${IBPDIR}/lib/libibp.a",
            LORS_BUILD_IBP="no",
            AC_FIND_FILE("${PREFIX}/ibp/src/ibp_ClientLib.c",
                          LORS_BUILD_IBP="yes"
                          LORS_IBP_SRC_DIR="${PREFIX}/ibp"
                          IBPDIR="${INS_DIR}",
                          AC_MSG_ERROR("Can not find ibp package")))
AC_SUBST(LORS_BUILD_IBP)
AC_SUBST(IBPDIR)
AC_SUBST(LORS_IBP_SRC_DIR)

AC_SUBST(PREFIX)

AC_OUTPUT(client/Makefile client/src/Makefile client/include/Makefile server/Makefile server/src/Makefile cgi/Makefile cgi/src/Makefile Makefile pre-install.sh,
        [/bin/sh pre-install.sh] )
